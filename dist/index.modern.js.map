{"version":3,"file":"index.modern.js","sources":["../src/OTPInputs.tsx","../src/index.tsx"],"sourcesContent":["import React, {\r\n  CSSProperties,\r\n  ChangeEvent,\r\n  ClipboardEvent,\r\n  Fragment,\r\n  KeyboardEvent,\r\n  ReactElement,\r\n  RefObject,\r\n  createRef,\r\n  useEffect,\r\n  useState,\r\n} from 'react';\r\nimport styles from './inputs.module.css';\r\ntype InputsConfig = {\r\n  inputsNumber: number;\r\n  separator?: ReactElement;\r\n  setStringCode: React.Dispatch<React.SetStateAction<string>>;\r\n  setSubmitStatus?: React.Dispatch<React.SetStateAction<boolean>>;\r\n  regex?: RegExp;\r\n  inputsClasses?: string;\r\n  inputsStyles?: CSSProperties;\r\n  containerClasses?: string;\r\n  containerStyles?: CSSProperties;\r\n};\r\ntype ItemsType = {\r\n  id: number;\r\n  value: string;\r\n  reference: RefObject<HTMLInputElement>;\r\n};\r\nconst OTPInputs = ({\r\n  inputsClasses = '',\r\n  inputsStyles,\r\n  inputsNumber,\r\n  setStringCode,\r\n  setSubmitStatus,\r\n  separator,\r\n  regex = /^[0-9]*$/,\r\n}: InputsConfig): ReactElement => {\r\n  const [items, setItems] = useState<ItemsType[]>([]);\r\n  const [pasteStatus, setPasteStatus] = useState<boolean>(false);\r\n  const [filledInputs, setFilledInputs] = useState<number>(0);\r\n  const [clickedInput, setClickedInput] = useState<number | null>(null);\r\n\r\n  useEffect(() => {\r\n    const newArr: ItemsType[] = [];\r\n    for (let i = 0; i < inputsNumber; i++) {\r\n      newArr[i] = {\r\n        id: i,\r\n        value: '',\r\n        reference: createRef<HTMLInputElement>(),\r\n      };\r\n    }\r\n    setItems(newArr);\r\n  }, [inputsNumber]);\r\n\r\n  useEffect(() => {\r\n    setFilledInputs(0);\r\n    const values = items.map((value) => {\r\n      return value.value;\r\n    });\r\n    setStringCode(values.join(''));\r\n    items.map((value) => {\r\n      if (value.value !== '' && value.value !== ' ') {\r\n        setFilledInputs((prev) => prev + 1);\r\n      } else setFilledInputs(0);\r\n    });\r\n  }, [items]);\r\n\r\n  useEffect(() => {\r\n    if (setSubmitStatus) {\r\n      items.length !== 0 && filledInputs === items.length\r\n        ? setSubmitStatus(false)\r\n        : setSubmitStatus(true);\r\n    }\r\n  }, [filledInputs]);\r\n\r\n  // useEffect(() => {\r\n  //   if (items.length > 0) {\r\n  //     items[0].reference.current?.focus()\r\n  //   }\r\n  // }, [items.length])\r\n\r\n  // useEffect(()=>{\r\n  //   if(items.length === inputsNumber){\r\n  //     items[0].reference.current?.focus()\r\n  //   }\r\n  // },[items[0]?.reference])\r\n\r\n  const setCodeDigit = (inputValue: string, inputId: number): void => {\r\n    setItems((prev) => {\r\n      const newItems = prev.map(({ value, id, reference }) => {\r\n        if (id === inputId) {\r\n          return { id, value: inputValue, reference };\r\n        } else return { id, value, reference };\r\n      });\r\n      return newItems;\r\n    });\r\n  };\r\n\r\n  const checkDigits = (digit: string, id: number): void => {\r\n    let enteredCharacter: string = digit;\r\n    const checkDigit = regex.test(enteredCharacter);\r\n    const nextSiblingElement = items[id + 1]?.reference.current;\r\n    if (!checkDigit) {\r\n      enteredCharacter = '';\r\n    }\r\n    digit && setCodeDigit(enteredCharacter, id);\r\n    if (checkDigit && nextSiblingElement) {\r\n      nextSiblingElement.focus();\r\n      // nextSiblingElement.select();\r\n    }\r\n  };\r\n  const inputChangeHandler = (\r\n    e: ChangeEvent<HTMLInputElement>,\r\n    id: number,\r\n  ): void => {\r\n    if (\r\n      items.length <= inputsNumber &&\r\n      !pasteStatus &&\r\n      e.target.value.length < 2\r\n    ) {\r\n      checkDigits(e.target.value, id);\r\n    }\r\n  };\r\n\r\n  const inputKeyDownHandler = (\r\n    e: KeyboardEvent<HTMLInputElement>,\r\n    id: number,\r\n  ): void => {\r\n    const target = e.target as HTMLInputElement | null;\r\n    const nextElement = items[id + 1]?.reference.current;\r\n    if (target && e.key !== 'Backspace' && Number(target.value)) {\r\n      if (id === clickedInput) {\r\n        target.select();\r\n        setClickedInput(null);\r\n      } else {\r\n        if (nextElement && !nextElement.value) {\r\n          nextElement.focus();\r\n          // nextElement.select()\r\n        }\r\n      }\r\n    }\r\n    if (target && e.key === 'Backspace') {\r\n      const prevSibling = items[id - 1]?.reference.current;\r\n      setCodeDigit('', id);\r\n      if (!target.value && id > 0) setCodeDigit('', id - 1);\r\n      if (!target.value && id === 0) setCodeDigit('', id);\r\n      if (prevSibling) {\r\n        prevSibling.focus();\r\n        prevSibling.select();\r\n      }\r\n    }\r\n  };\r\n  const handleClick = (\r\n    e: React.MouseEvent<HTMLInputElement, MouseEvent>,\r\n    id: number,\r\n  ): void => {\r\n    setClickedInput(id);\r\n    e.currentTarget.select();\r\n  };\r\n  const inputPasteHandler = (e: ClipboardEvent<HTMLInputElement>): void => {\r\n    if (\r\n      e.clipboardData &&\r\n      e.clipboardData.getData('text').length === items.length\r\n    ) {\r\n      setPasteStatus(true);\r\n      const enteredData = e.clipboardData.getData('text');\r\n      enteredData.split('').forEach((value, index) => {\r\n        checkDigits(value, index);\r\n        index === items.length - 1 && setPasteStatus(false);\r\n      });\r\n    }\r\n  };\r\n  return (\r\n    <Fragment>\r\n      {items.map(({ value, id, reference }, key) => {\r\n        return (\r\n          <Fragment key={`OTPInput_${id}`}>\r\n            <input\r\n              style={{ ...inputsStyles }}\r\n              ref={reference}\r\n              onClick={(e) => handleClick(e, id)}\r\n              onChange={(e) => inputChangeHandler(e, id)}\r\n              onKeyDown={(e) => inputKeyDownHandler(e, id)}\r\n              onPaste={(e) => inputPasteHandler(e)}\r\n              value={value}\r\n              inputMode=\"numeric\"\r\n              type=\"text\"\r\n              autoComplete=\"one-time-code\"\r\n              className={`${styles.inputs} ${inputsClasses}`}\r\n            />\r\n            {key < items.length - 1 && separator}\r\n          </Fragment>\r\n        );\r\n      })}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default OTPInputs;\r\n","import React, { CSSProperties, ReactElement } from 'react';\nimport styles from './inputs.module.css';\nimport OTPInputs from './OTPInputs';\n\nexport type InputsConfig = {\n  inputsNumber: number;\n  separator?: ReactElement;\n  setStringCode: React.Dispatch<React.SetStateAction<string>>;\n  setSubmitStatus?: React.Dispatch<React.SetStateAction<boolean>>;\n  regex?: RegExp;\n  inputsClasses?: string;\n  inputsStyles?: CSSProperties;\n  containerClasses?: string;\n  containerStyles?: CSSProperties;\n};\nexport const OTP = ({\n  inputsClasses = '',\n  inputsStyles,\n  containerClasses = '',\n  containerStyles,\n  inputsNumber,\n  setStringCode,\n  setSubmitStatus,\n  separator,\n  regex = /^[0-9]*$/,\n}: InputsConfig): ReactElement => {\n  return (\n    <div\n      style={{ ...containerStyles }}\n      className={`${styles.container}\n      ${containerClasses}`}\n    >\n      <OTPInputs\n        inputsClasses={inputsClasses}\n        inputsStyles={inputsStyles}\n        containerClasses={containerClasses}\n        inputsNumber={inputsNumber}\n        setStringCode={setStringCode}\n        setSubmitStatus={setSubmitStatus}\n        separator={separator}\n        regex={regex}\n      />\n    </div>\n  );\n};\n"],"names":["OTPInputs","inputsClasses","inputsStyles","inputsNumber","setStringCode","setSubmitStatus","separator","regex","items","setItems","useState","pasteStatus","setPasteStatus","filledInputs","setFilledInputs","clickedInput","setClickedInput","useEffect","newArr","i","id","value","reference","createRef","values","map","join","prev","length","setCodeDigit","inputValue","inputId","newItems","checkDigits","digit","enteredCharacter","checkDigit","test","nextSiblingElement","_items","current","focus","inputChangeHandler","e","target","inputKeyDownHandler","nextElement","_items2","key","Number","select","_items3","prevSibling","handleClick","currentTarget","inputPasteHandler","clipboardData","getData","enteredData","split","forEach","index","React","Fragment","style","ref","onClick","onChange","onKeyDown","onPaste","inputMode","type","autoComplete","className","styles","inputs","OTP","containerClasses","containerStyles","container"],"mappings":"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"}